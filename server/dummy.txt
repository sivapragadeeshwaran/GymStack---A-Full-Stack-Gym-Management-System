const User = require('../model/user')
const bcrypt =require('bcrypt')
const jwt = require('jsonwebtoken');

const userRegister = async(req,res) => {
    try{

         const { userName,email,password,role } = req.body;
        const userExist = await User.findOne({ $or:[{userName},{email}] });
        if(userExist){
          return res.status(400).json({
                success:false,
                message:"user already exist"
            })
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password,salt);

        const newUser = await User.create({userName,email,password:hashedPassword,role});

        if(newUser){
            res.status(201).json({
                success:true,
                message:" new user added successfully ðŸš€"
            });
        }else{
            res.status(404).json({
                success:false,
                message:"failed to add user"
            });
        }


    }catch(e){

        res.status(500).json({
            success:false,
            message:"Something went wrong"
        })
    }
}

const userlogin = async(req,res) => {
    try{

        const {userName,password} = req.body;
        const user = await User.findOne({userName});

        if(!user){
            return res.status(400).json({
                success:false,
                message:"User not found"
            });
        }

        const isPasswordMatch = await bcrypt.compare(password,user.password);

        if(!isPasswordMatch){
            return res.status(400).json({
                success:false,
                message:"username or password not matched"
            })
        }

        const accessToken = jwt.sign({
            user_id : user._id,
            userName : user.userName,
            role: user.role
        },process.env.USER_SECRET_KEY,{
            expiresIn:"15m"
        });

        res.status(201).json({
            success:true,
            message:"user logined successfully",
            accessToken
        });



    }catch(e){
        res.status(500).json({
            success:false,
            message:"Something went wrong"
        })
    }
}

module.exports ={
    userRegister,userlogin
}